#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SPBU Site
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –∫–∏–±–µ—Ä–∞—Ç–∞–∫
"""

import os
import sys
import json
import subprocess
import time
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.append(str(project_root / 'spbu_site' / 'spbu_site'))


class SecurityTestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'tests': {},
            'overall_status': 'PENDING'
        }
    
    def run_basic_security_check(self):
        """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîç –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            result = subprocess.run(
                [sys.executable, 'security_check.py'],
                capture_output=True,
                text=True,
                cwd=project_root
            )
            
            self.results['tests']['basic_security_check'] = {
                'success': result.returncode == 0,
                'output': result.stdout,
                'error': result.stderr
            }
            
            if result.returncode == 0:
                print("‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞")
            else:
                print("‚ùå –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                print(result.stderr)
                
        except Exception as e:
            self.results['tests']['basic_security_check'] = {
                'success': False,
                'error': str(e)
            }
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    def run_cyber_attack_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫"""
        print("üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫...")
        
        try:
            result = subprocess.run(
                [sys.executable, 'cyber_attack_test.py', '--url', self.base_url],
                capture_output=True,
                text=True,
                cwd=project_root
            )
            
            self.results['tests']['cyber_attack_tests'] = {
                'success': result.returncode == 0,
                'output': result.stdout,
                'error': result.stderr
            }
            
            if result.returncode == 0:
                print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –ø—Ä–æ–π–¥–µ–Ω—ã")
            else:
                print("‚ùå –¢–µ—Å—Ç—ã –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
                print(result.stderr)
                
        except Exception as e:
            self.results['tests']['cyber_attack_tests'] = {
                'success': False,
                'error': str(e)
            }
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –∫–∏–±–µ—Ä–∞—Ç–∞–∫: {e}")
    
    def run_advanced_security_tests(self):
        """–ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîç –ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            result = subprocess.run(
                [sys.executable, 'advanced_security_test.py'],
                capture_output=True,
                text=True,
                cwd=project_root
            )
            
            self.results['tests']['advanced_security_tests'] = {
                'success': result.returncode == 0,
                'output': result.stdout,
                'error': result.stderr
            }
            
            if result.returncode == 0:
                print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
            else:
                print("‚ùå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
                print(result.stderr)
                
        except Exception as e:
            self.results['tests']['advanced_security_tests'] = {
                'success': False,
                'error': str(e)
            }
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
    
    def run_dependency_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ safety
            result = subprocess.run(
                ['safety', 'check', '--json'],
                capture_output=True,
                text=True,
                cwd=project_root
            )
            
            if result.returncode == 0:
                vulnerabilities = json.loads(result.stdout)
                self.results['tests']['dependency_check'] = {
                    'success': True,
                    'vulnerabilities': vulnerabilities
                }
                print(f"‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –Ω–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vulnerabilities)}")
            else:
                self.results['tests']['dependency_check'] = {
                    'success': False,
                    'error': 'Safety check failed'
                }
                print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                
        except FileNotFoundError:
            self.results['tests']['dependency_check'] = {
                'success': True,
                'note': 'Safety not installed, skipping dependency check'
            }
            print("‚ö†Ô∏è  Safety –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        except Exception as e:
            self.results['tests']['dependency_check'] = {
                'success': False,
                'error': str(e)
            }
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
    
    def run_code_quality_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ bandit
            result = subprocess.run(
                ['bandit', '-r', 'spbu_site', '-f', 'json'],
                capture_output=True,
                text=True,
                cwd=project_root
            )
            
            if result.returncode == 0:
                issues = json.loads(result.stdout)
                self.results['tests']['code_quality_check'] = {
                    'success': True,
                    'issues': issues.get('results', [])
                }
                print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues.get('results', []))}")
            else:
                self.results['tests']['code_quality_check'] = {
                    'success': False,
                    'error': 'Bandit check failed'
                }
                print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                
        except FileNotFoundError:
            self.results['tests']['code_quality_check'] = {
                'success': True,
                'note': 'Bandit not installed, skipping code quality check'
            }
            print("‚ö†Ô∏è  Bandit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
        except Exception as e:
            self.results['tests']['code_quality_check'] = {
                'success': False,
                'error': str(e)
            }
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞: {e}")
    
    def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        all_tests_passed = all(
            test.get('success', False) 
            for test in self.results['tests'].values()
        )
        
        if all_tests_passed:
            self.results['overall_status'] = 'SECURE'
        else:
            self.results['overall_status'] = 'VULNERABLE'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
        report_path = project_root / 'comprehensive_security_report.json'
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._generate_text_report()
        
        print(f"üìÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}")
    
    def _generate_text_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_path = project_root / 'comprehensive_security_report.txt'
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò SPBU SITE\n")
            f.write("=" * 80 + "\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"URL —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.base_url}\n")
            f.write(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.results['overall_status']}\n\n")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
            f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n")
            f.write("-" * 50 + "\n")
            
            for test_name, test_result in self.results['tests'].items():
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if test_result.get('success') else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                f.write(f"{test_name}: {status}\n")
                
                if not test_result.get('success') and test_result.get('error'):
                    f.write(f"  –û—à–∏–±–∫–∞: {test_result['error']}\n")
                
                if test_result.get('note'):
                    f.write(f"  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {test_result['note']}\n")
                
                if test_result.get('vulnerabilities'):
                    f.write(f"  –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(test_result['vulnerabilities'])}\n")
                
                if test_result.get('issues'):
                    f.write(f"  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(test_result['issues'])}\n")
            
            f.write("\n")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            f.write("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
            f.write("-" * 50 + "\n")
            
            if self.results['overall_status'] == 'SECURE':
                f.write("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n")
                f.write("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
                f.write("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n")
                f.write("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n")
            else:
                f.write("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n")
                f.write("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n")
                f.write("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n")
                f.write("üìö –ò–∑—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n")
            
            f.write("\n")
            
            # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞—Ç–∞–∫
            f.write("–ü–†–û–í–ï–†–ï–ù–ù–´–ï –¢–ò–ü–´ –ê–¢–ê–ö:\n")
            f.write("-" * 50 + "\n")
            f.write("‚Ä¢ SQL Injection\n")
            f.write("‚Ä¢ Cross-Site Scripting (XSS)\n")
            f.write("‚Ä¢ Cross-Site Request Forgery (CSRF)\n")
            f.write("‚Ä¢ Path Traversal\n")
            f.write("‚Ä¢ File Upload Vulnerabilities\n")
            f.write("‚Ä¢ Authentication Bypass\n")
            f.write("‚Ä¢ Information Disclosure\n")
            f.write("‚Ä¢ Rate Limiting\n")
            f.write("‚Ä¢ Security Headers\n")
            f.write("‚Ä¢ LDAP Injection\n")
            f.write("‚Ä¢ NoSQL Injection\n")
            f.write("‚Ä¢ Command Injection\n")
            f.write("‚Ä¢ Server-Side Request Forgery (SSRF)\n")
            f.write("‚Ä¢ XML External Entity (XXE)\n")
            f.write("‚Ä¢ Dependency Vulnerabilities\n")
            f.write("‚Ä¢ Code Quality Issues\n")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SPBU Site...")
        print("=" * 80)
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.run_basic_security_check()
        self.run_cyber_attack_tests()
        self.run_advanced_security_tests()
        self.run_dependency_check()
        self.run_code_quality_check()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_comprehensive_report()
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "=" * 80)
        print("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        if self.results['overall_status'] == 'SECURE':
            print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: comprehensive_security_report.json")
        print(f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: comprehensive_security_report.txt")
        
        return self.results['overall_status'] == 'SECURE'


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SPBU Site')
    parser.add_argument('--url', default='http://localhost:8000', 
                       help='URL —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–∞–π—Ç–∞')
    parser.add_argument('--output', default='comprehensive_security_report.json',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞')
    
    args = parser.parse_args()
    
    runner = SecurityTestRunner(args.url)
    success = runner.run_all_tests()
    
    if success:
        print("\nüéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –ø—Ä–æ–±–ª–µ–º—ã!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)


if __name__ == "__main__":
    main() 