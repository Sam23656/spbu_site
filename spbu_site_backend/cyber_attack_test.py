#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –¥–ª—è SPBU Site
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
"""

import os
import sys
import json
import requests
import subprocess
import tempfile
from pathlib import Path
from datetime import datetime
from urllib.parse import urljoin, quote

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.append(str(project_root / 'spbu_site' / 'spbu_site'))


class CyberAttackTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫"""
    
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'tests': {},
            'overall_status': 'PENDING'
        }
        self.session = requests.Session()
    
    def test_sql_injection(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π...")
        
        sql_payloads = [
            "' OR 1=1--",
            "'; DROP TABLE users;--",
            "' UNION SELECT * FROM users--",
            "admin' OR '1'='1",
            "1' AND 1=1--",
            "1' AND 1=2--",
            "' OR 'x'='x",
            "'; EXEC xp_cmdshell('dir');--",
            "' OR 1=1#",
            "' OR 1=1/*",
        ]
        
        vulnerable_endpoints = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        test_endpoints = [
            '/api/login/',
            '/api/users/',
            '/api/news/',
            '/admin/login/',
            '/search/',
        ]
        
        for endpoint in test_endpoints:
            for payload in sql_payloads:
                try:
                    # –¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞
                    response = self.session.get(
                        urljoin(self.base_url, endpoint),
                        params={'q': payload, 'id': payload, 'username': payload},
                        timeout=5
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
                    if self._detect_sql_injection_response(response):
                        vulnerable_endpoints.append(f"GET {endpoint} - {payload}")
                    
                    # –¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞
                    response = self.session.post(
                        urljoin(self.base_url, endpoint),
                        data={'username': payload, 'password': payload, 'query': payload},
                        timeout=5
                    )
                    
                    if self._detect_sql_injection_response(response):
                        vulnerable_endpoints.append(f"POST {endpoint} - {payload}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
        
        if vulnerable_endpoints:
            self.results['tests']['sql_injection'] = {
                'status': 'VULNERABLE',
                'vulnerabilities': vulnerable_endpoints
            }
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏: {len(vulnerable_endpoints)}")
        else:
            self.results['tests']['sql_injection'] = {'status': 'SECURE'}
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def _detect_sql_injection_response(self, response):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ"""
        sql_indicators = [
            'sql syntax',
            'mysql_fetch_array',
            'mysql_fetch_object',
            'mysql_num_rows',
            'mysql_fetch_assoc',
            'mysql_fetch_row',
            'mysql_fetch_field',
            'mysql error',
            'sql error',
            'oracle error',
            'postgresql error',
            'sqlite error',
            'database error',
            'syntax error',
            'unclosed quotation mark',
            'quoted string not properly terminated',
        ]
        
        response_text = response.text.lower()
        return any(indicator in response_text for indicator in sql_indicators)
    
    def test_xss_attacks(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç XSS –∞—Ç–∞–∫"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç XSS –∞—Ç–∞–∫...")
        
        xss_payloads = [
            '<script>alert("XSS")</script>',
            '<img src="x" onerror="alert(1)">',
            '<svg onload="alert(1)">',
            'javascript:alert("XSS")',
            '<iframe src="javascript:alert(1)">',
            '"><script>alert("XSS")</script>',
            '"><img src="x" onerror="alert(1)">',
            '";alert("XSS");//',
            '"><script>alert(String.fromCharCode(88,83,83))</script>',
            '<script>eval(String.fromCharCode(97,108,101,114,116,40,34,88,83,83,34,41))</script>',
        ]
        
        vulnerable_endpoints = []
        
        test_endpoints = [
            '/api/news/',
            '/api/comments/',
            '/search/',
            '/contact/',
            '/feedback/',
        ]
        
        for endpoint in test_endpoints:
            for payload in xss_payloads:
                try:
                    # –¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞
                    response = self.session.get(
                        urljoin(self.base_url, endpoint),
                        params={'q': payload, 'comment': payload, 'message': payload},
                        timeout=5
                    )
                    
                    if payload in response.text:
                        vulnerable_endpoints.append(f"GET {endpoint} - {payload}")
                    
                    # –¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞
                    response = self.session.post(
                        urljoin(self.base_url, endpoint),
                        data={'comment': payload, 'message': payload, 'content': payload},
                        timeout=5
                    )
                    
                    if payload in response.text:
                        vulnerable_endpoints.append(f"POST {endpoint} - {payload}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
        
        if vulnerable_endpoints:
            self.results['tests']['xss'] = {
                'status': 'VULNERABLE',
                'vulnerabilities': vulnerable_endpoints
            }
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {len(vulnerable_endpoints)}")
        else:
            self.results['tests']['xss'] = {'status': 'SECURE'}
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç XSS –∞—Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_csrf_attacks(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç CSRF –∞—Ç–∞–∫"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç CSRF –∞—Ç–∞–∫...")
        
        csrf_vulnerabilities = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç CSRF
        csrf_protected_endpoints = [
            '/api/users/create/',
            '/api/news/create/',
            '/api/comments/create/',
            '/admin/users/add/',
            '/api/delete/',
        ]
        
        for endpoint in csrf_protected_endpoints:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞
                response = self.session.post(
                    urljoin(self.base_url, endpoint),
                    data={'test': 'data'},
                    timeout=5
                )
                
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞ - —ç—Ç–æ —É—è–∑–≤–∏–º–æ—Å—Ç—å
                if response.status_code == 200:
                    csrf_vulnerabilities.append(f"POST {endpoint} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CSRF –∑–∞—â–∏—Ç–∞")
                elif response.status_code == 403:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ CSRF –æ—à–∏–±–∫–∞
                    if 'csrf' in response.text.lower() or 'forbidden' in response.text.lower():
                        pass  # –≠—Ç–æ —Ö–æ—Ä–æ—à–æ - CSRF –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    else:
                        csrf_vulnerabilities.append(f"POST {endpoint} - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ 403")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ CSRF {endpoint}: {e}")
        
        if csrf_vulnerabilities:
            self.results['tests']['csrf'] = {
                'status': 'VULNERABLE',
                'vulnerabilities': csrf_vulnerabilities
            }
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {len(csrf_vulnerabilities)}")
        else:
            self.results['tests']['csrf'] = {'status': 'SECURE'}
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF –∞—Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_path_traversal(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç Path Traversal –∞—Ç–∞–∫"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç Path Traversal...")
        
        path_traversal_payloads = [
            '../../../etc/passwd',
            '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
            '....//....//....//etc/passwd',
            '..%2F..%2F..%2Fetc%2Fpasswd',
            '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd',
            '..%252F..%252F..%252Fetc%252Fpasswd',
            '..%c0%af..%c0%af..%c0%afetc%c0%afpasswd',
            '..%255c..%255c..%255cwindows%255csystem32%255cdrivers%255cetc%255chosts',
        ]
        
        vulnerable_endpoints = []
        
        test_endpoints = [
            '/api/files/',
            '/download/',
            '/static/',
            '/media/',
            '/uploads/',
        ]
        
        for endpoint in test_endpoints:
            for payload in path_traversal_payloads:
                try:
                    response = self.session.get(
                        urljoin(self.base_url, f"{endpoint}{payload}"),
                        timeout=5
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if self._detect_system_file_content(response):
                        vulnerable_endpoints.append(f"GET {endpoint} - {payload}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
        
        if vulnerable_endpoints:
            self.results['tests']['path_traversal'] = {
                'status': 'VULNERABLE',
                'vulnerabilities': vulnerable_endpoints
            }
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Path Traversal —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {len(vulnerable_endpoints)}")
        else:
            self.results['tests']['path_traversal'] = {'status': 'SECURE'}
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç Path Traversal —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def _detect_system_file_content(self, response):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        system_file_indicators = [
            'root:x:0:0:',
            'bin:x:1:1:',
            'daemon:x:2:2:',
            'sys:x:3:3:',
            'sync:x:4:65534:',
            'games:x:5:60:',
            'man:x:6:12:',
            'lp:x:7:7:',
            'mail:x:8:8:',
            'news:x:9:9:',
            'uucp:x:10:10:',
            'proxy:x:13:13:',
            'www-data:x:33:33:',
            'backup:x:34:34:',
            'list:x:38:38:',
            'irc:x:39:39:',
            'gnats:x:41:41:',
            'nobody:x:65534:65534:',
            'system:',
            'administrator:',
            '127.0.0.1',
            'localhost',
            '::1',
        ]
        
        response_text = response.text
        return any(indicator in response_text for indicator in system_file_indicators)
    
    def test_file_upload_vulnerabilities(self):
        """–¢–µ—Å—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...")
        
        malicious_files = [
            ('test.php', '<?php echo "PHP Code"; ?>', 'application/x-php'),
            ('test.jsp', '<% out.println("JSP Code"); %>', 'application/x-jsp'),
            ('test.asp', '<% Response.Write("ASP Code") %>', 'application/x-asp'),
            ('test.exe', b'MZ\x90\x00', 'application/x-executable'),
            ('test.bat', '@echo off\nnet user', 'application/x-bat'),
            ('test.sh', '#!/bin/bash\necho "Shell script"', 'application/x-sh'),
        ]
        
        vulnerable_endpoints = []
        
        upload_endpoints = [
            '/api/upload/',
            '/upload/',
            '/api/files/upload/',
            '/media/upload/',
        ]
        
        for endpoint in upload_endpoints:
            for filename, content, content_type in malicious_files:
                try:
                    files = {'file': (filename, content, content_type)}
                    response = self.session.post(
                        urljoin(self.base_url, endpoint),
                        files=files,
                        timeout=10
                    )
                    
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ - —ç—Ç–æ —É—è–∑–≤–∏–º–æ—Å—Ç—å
                    if response.status_code == 200 or response.status_code == 201:
                        vulnerable_endpoints.append(f"POST {endpoint} - {filename}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
        
        if vulnerable_endpoints:
            self.results['tests']['file_upload'] = {
                'status': 'VULNERABLE',
                'vulnerabilities': vulnerable_endpoints
            }
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {len(vulnerable_endpoints)}")
        else:
            self.results['tests']['file_upload'] = {'status': 'SECURE'}
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_authentication_bypass(self):
        """–¢–µ—Å—Ç –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        bypass_techniques = [
            # –ü–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ —Å –ø—É—Å—Ç—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            {'username': '', 'password': ''},
            {'username': 'admin', 'password': ''},
            {'username': '', 'password': 'admin'},
            
            # –ü–æ–ø—ã—Ç–∫–∏ —Å SQL –∏–Ω—ä–µ–∫—Ü–∏—è–º–∏
            {'username': "' OR 1=1--", 'password': 'anything'},
            {'username': "admin'--", 'password': 'anything'},
            {'username': "admin'/*", 'password': 'anything'},
            
            # –ü–æ–ø—ã—Ç–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            {'Authorization': ''},
            {'Authorization': 'Bearer '},
            {'Authorization': 'Bearer null'},
            {'Authorization': 'Bearer undefined'},
            
            # –ü–æ–ø—ã—Ç–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            {'Authorization': 'Bearer invalid_token'},
            {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.Et9HFtf9R3GEMA0IICOfFMVXY7kkTX1wr4qCyhIf58U'},
        ]
        
        vulnerable_endpoints = []
        
        protected_endpoints = [
            '/api/admin/',
            '/api/users/',
            '/admin/',
            '/api/sensitive/',
        ]
        
        for endpoint in protected_endpoints:
            for bypass_data in bypass_techniques:
                try:
                    if 'Authorization' in bypass_data:
                        # –¢–µ—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        headers = bypass_data
                        response = self.session.get(
                            urljoin(self.base_url, endpoint),
                            headers=headers,
                            timeout=5
                        )
                    else:
                        # –¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
                        response = self.session.post(
                            urljoin(self.base_url, endpoint),
                            data=bypass_data,
                            timeout=5
                        )
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É - —ç—Ç–æ —É—è–∑–≤–∏–º–æ—Å—Ç—å
                    if response.status_code == 200:
                        vulnerable_endpoints.append(f"{endpoint} - {bypass_data}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
        
        if vulnerable_endpoints:
            self.results['tests']['auth_bypass'] = {
                'status': 'VULNERABLE',
                'vulnerabilities': vulnerable_endpoints
            }
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(vulnerable_endpoints)}")
        else:
            self.results['tests']['auth_bypass'] = {'status': 'SECURE'}
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_information_disclosure(self):
        """–¢–µ—Å—Ç —É—Ç–µ—á–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–µ—á–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        
        sensitive_endpoints = [
            '/.git/',
            '/.env',
            '/config.php',
            '/wp-config.php',
            '/config.json',
            '/database.yml',
            '/.htaccess',
            '/robots.txt',
            '/sitemap.xml',
            '/api/',
            '/admin/',
            '/debug/',
            '/error/',
            '/logs/',
            '/backup/',
            '/.svn/',
            '/.hg/',
            '/.bzr/',
        ]
        
        information_leaks = []
        
        for endpoint in sensitive_endpoints:
            try:
                response = self.session.get(
                    urljoin(self.base_url, endpoint),
                    timeout=5
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ª–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if self._detect_sensitive_information(response):
                    information_leaks.append(f"GET {endpoint} - —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
        
        if information_leaks:
            self.results['tests']['information_disclosure'] = {
                'status': 'VULNERABLE',
                'vulnerabilities': information_leaks
            }
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—Ç–µ—á–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {len(information_leaks)}")
        else:
            self.results['tests']['information_disclosure'] = {'status': 'SECURE'}
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def _detect_sensitive_information(self, response):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ"""
        sensitive_indicators = [
            'database_password',
            'secret_key',
            'api_key',
            'private_key',
            'password',
            'token',
            'credential',
            'connection_string',
            'database_url',
            'mysql://',
            'postgresql://',
            'sqlite://',
            'mongodb://',
            'redis://',
            'aws_access_key',
            'aws_secret_key',
            'google_api_key',
            'facebook_app_secret',
            'twitter_consumer_secret',
            'github_token',
        ]
        
        response_text = response.text.lower()
        return any(indicator in response_text for indicator in sensitive_indicators)
    
    def test_rate_limiting(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        rate_limit_vulnerabilities = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å rate limiting
        rate_limited_endpoints = [
            '/api/login/',
            '/api/register/',
            '/api/password/reset/',
            '/admin/login/',
        ]
        
        for endpoint in rate_limited_endpoints:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
                responses = []
                for i in range(100):
                    response = self.session.post(
                        urljoin(self.base_url, endpoint),
                        data={'username': f'test{i}', 'password': 'test'},
                        timeout=5
                    )
                    responses.append(response)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Å–µ –ª–∏ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
                successful_requests = sum(1 for r in responses if r.status_code == 200)
                if successful_requests > 10:  # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    rate_limit_vulnerabilities.append(f"POST {endpoint} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç rate limiting")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ rate limiting {endpoint}: {e}")
        
        if rate_limit_vulnerabilities:
            self.results['tests']['rate_limiting'] = {
                'status': 'VULNERABLE',
                'vulnerabilities': rate_limit_vulnerabilities
            }
            print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å rate limiting: {len(rate_limit_vulnerabilities)}")
        else:
            self.results['tests']['rate_limiting'] = {'status': 'SECURE'}
            print("‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_security_headers(self):
        """–¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            response = self.session.get(self.base_url, timeout=5)
            headers = response.headers
            
            required_headers = {
                'X-Frame-Options': ['DENY', 'SAMEORIGIN'],
                'X-Content-Type-Options': ['nosniff'],
                'X-XSS-Protection': ['1; mode=block', '1'],
                'Strict-Transport-Security': None,  # –õ—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                'Content-Security-Policy': None,  # –õ—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                'Referrer-Policy': None,  # –õ—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            }
            
            missing_headers = []
            
            for header, expected_values in required_headers.items():
                if header not in headers:
                    missing_headers.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: {header}")
                elif expected_values and headers[header] not in expected_values:
                    missing_headers.append(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ {header}: {headers[header]}")
            
            if missing_headers:
                self.results['tests']['security_headers'] = {
                    'status': 'VULNERABLE',
                    'vulnerabilities': missing_headers
                }
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {len(missing_headers)}")
            else:
                self.results['tests']['security_headers'] = {'status': 'SECURE'}
                print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            self.results['tests']['security_headers'] = {
                'status': 'ERROR',
                'error': str(e)
            }
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫...")
        print("=" * 60)
        
        tests = [
            self.test_sql_injection,
            self.test_xss_attacks,
            self.test_csrf_attacks,
            self.test_path_traversal,
            self.test_file_upload_vulnerabilities,
            self.test_authentication_bypass,
            self.test_information_disclosure,
            self.test_rate_limiting,
            self.test_security_headers,
        ]
        
        for test in tests:
            try:
                test()
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        vulnerable_tests = sum(
            1 for test_result in self.results['tests'].values()
            if test_result.get('status') == 'VULNERABLE'
        )
        
        if vulnerable_tests == 0:
            self.results['overall_status'] = 'SECURE'
        else:
            self.results['overall_status'] = 'VULNERABLE'
        
        self._generate_report()
    
    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "=" * 60)
        print("–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ó–ê–©–ò–¢–´ –û–¢ –ö–ò–ë–ï–†–ê–¢–ê–ö")
        print("=" * 60)
        
        print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.results['overall_status']}")
        print(f"–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        for test_name, test_result in self.results['tests'].items():
            status = test_result.get('status', 'UNKNOWN')
            if status == 'SECURE':
                print(f"‚úÖ {test_name}: –ë–ï–ó–û–ü–ê–°–ù–û")
            elif status == 'VULNERABLE':
                print(f"‚ùå {test_name}: –£–Ø–ó–í–ò–ú–û")
                vulnerabilities = test_result.get('vulnerabilities', [])
                for vuln in vulnerabilities[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                    print(f"   - {vuln}")
                if len(vulnerabilities) > 3:
                    print(f"   ... –∏ –µ—â–µ {len(vulnerabilities) - 3} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            else:
                print(f"‚ö†Ô∏è  {test_name}: –û–®–ò–ë–ö–ê")
        
        print()
        
        if self.results['overall_status'] == 'SECURE':
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∏–±–µ—Ä–∞—Ç–∞–∫")
        else:
            print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –£–Ø–ó–í–ò–ú–û–°–¢–ò!")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_path = project_root / 'cyber_attack_report.json'
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫')
    parser.add_argument('--url', default='http://localhost:8000', 
                       help='URL —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–∞–π—Ç–∞')
    parser.add_argument('--output', default='cyber_attack_report.json',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞')
    
    args = parser.parse_args()
    
    tester = CyberAttackTester(args.url)
    tester.run_all_tests()
    
    if tester.results['overall_status'] == 'SECURE':
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main() 