import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './MaintenancePage.scss';

interface MaintenanceData {
  is_active: boolean;
  title: string;
  message: string;
  start_time: string;
  estimated_end_time: string;
  remaining_time: number | null;
  is_expired: boolean;
}

const MaintenancePage: React.FC = () => {
  const [maintenanceData, setMaintenanceData] = useState<MaintenanceData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [timeLeft, setTimeLeft] = useState<number | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    fetchMaintenanceStatus();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const statusInterval = setInterval(() => {
      fetchMaintenanceStatus();
    }, 5000);
    
    return () => {
      clearInterval(statusInterval);
    };
  }, []);

  useEffect(() => {
    let interval: number;
    
    if (maintenanceData?.is_active && maintenanceData.remaining_time && maintenanceData.remaining_time > 0) {
      interval = setInterval(() => {
        setTimeLeft(prev => {
          if (prev && prev > 0) {
            return prev - 1;
          }
          return 0;
        });
      }, 1000);
    }

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [maintenanceData]);

  const fetchMaintenanceStatus = async () => {
    try {
      console.log('üîç MaintenancePage: –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö. —Ä–∞–±–æ—Ç...');
      setLoading(true);
      const response = await fetch('http://localhost:8000/api/maintenance/status/');
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç');
      }
      
      const data = await response.json();
      console.log('üìä MaintenancePage: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
      setMaintenanceData(data);
      
      // –ï—Å–ª–∏ —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      if (!data.is_active) {
        console.log('‚úÖ MaintenancePage: –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
        navigate('/');
        return;
      }
      
      if (data.remaining_time) {
        setTimeLeft(data.remaining_time);
      }
      
      setError(null);
    } catch (err) {
      console.error('‚ùå MaintenancePage: –û—à–∏–±–∫–∞:', err);
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const formatTime = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    } else {
      return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
  };

  if (loading) {
    return (
      <div className="maintenance-page">
        <div className="maintenance-container">
          <div className="loading-spinner">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="maintenance-page">
        <div className="maintenance-container">
          <div className="error-message">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={fetchMaintenanceStatus} className="retry-button">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            <p className="fallback-message">
              –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (!maintenanceData?.is_active) {
    return (
      <div className="maintenance-page">
        <div className="maintenance-container">
          <div className="no-maintenance">
            <h2>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è</h2>
            <p>–°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
            <button onClick={fetchMaintenanceStatus} className="refresh-button">
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="maintenance-page">
      <div className="maintenance-container">
        <div className="maintenance-header">
          <div className="maintenance-icon">üîß</div>
          <h1>{maintenanceData.title}</h1>
        </div>
        
        <div className="maintenance-message">
          <p>{maintenanceData.message}</p>
        </div>
        
        {maintenanceData.estimated_end_time && (
          <div className="maintenance-timer">
            <h3>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</h3>
            <div className="timer-display">
              {timeLeft !== null && timeLeft > 0 ? (
                <span className="time-left">{formatTime(timeLeft)}</span>
              ) : (
                <span className="time-expired">–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ</span>
              )}
            </div>
          </div>
        )}
        
        <div className="maintenance-info">
          <div className="info-item">
            <strong>–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:</strong>
            <span>{new Date(maintenanceData.start_time).toLocaleString('ru-RU')}</span>
          </div>
          
          {maintenanceData.estimated_end_time && (
            <div className="info-item">
              <strong>–û–∂–∏–¥–∞–µ–º–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</strong>
              <span>{new Date(maintenanceData.estimated_end_time).toLocaleString('ru-RU')}</span>
            </div>
          )}
        </div>
        
        <div className="maintenance-actions">
          <button onClick={fetchMaintenanceStatus} className="refresh-button">
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </button>
          <button onClick={() => navigate('/')} className="return-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    </div>
  );
};

export default MaintenancePage;
